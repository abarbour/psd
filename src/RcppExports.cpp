// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// rcpp_ctap_simple
IntegerVector rcpp_ctap_simple(IntegerVector tapvec, const int maxslope);
RcppExport SEXP psd_rcpp_ctap_simple(SEXP tapvecSEXP, SEXP maxslopeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type tapvec(tapvecSEXP);
    Rcpp::traits::input_parameter< const int >::type maxslope(maxslopeSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_ctap_simple(tapvec, maxslope));
    return rcpp_result_gen;
END_RCPP
}
// modulo_floor
IntegerVector modulo_floor(IntegerVector n, int m);
RcppExport SEXP psd_modulo_floor(SEXP nSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(modulo_floor(n, m));
    return rcpp_result_gen;
END_RCPP
}
// parabolic_weights_rcpp
List parabolic_weights_rcpp(const int ntap);
RcppExport SEXP psd_parabolic_weights_rcpp(SEXP ntapSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type ntap(ntapSEXP);
    rcpp_result_gen = Rcpp::wrap(parabolic_weights_rcpp(ntap));
    return rcpp_result_gen;
END_RCPP
}
// resample_fft_rcpp
List resample_fft_rcpp(ComplexVector fftz, IntegerVector tapers, bool verbose, const bool dbl, const int tapcap);
RcppExport SEXP psd_resample_fft_rcpp(SEXP fftzSEXP, SEXP tapersSEXP, SEXP verboseSEXP, SEXP dblSEXP, SEXP tapcapSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ComplexVector >::type fftz(fftzSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type tapers(tapersSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const bool >::type dbl(dblSEXP);
    Rcpp::traits::input_parameter< const int >::type tapcap(tapcapSEXP);
    rcpp_result_gen = Rcpp::wrap(resample_fft_rcpp(fftz, tapers, verbose, dbl, tapcap));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"psd_rcpp_ctap_simple", (DL_FUNC) &psd_rcpp_ctap_simple, 2},
    {"psd_modulo_floor", (DL_FUNC) &psd_modulo_floor, 2},
    {"psd_parabolic_weights_rcpp", (DL_FUNC) &psd_parabolic_weights_rcpp, 1},
    {"psd_resample_fft_rcpp", (DL_FUNC) &psd_resample_fft_rcpp, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_psd(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}

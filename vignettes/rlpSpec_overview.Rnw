\documentclass{article}
% !Rnw weave = knitr
% sweave fig help:
% http://users.stat.umn.edu/~geyer/Sweave/foo.pdf
% borrowing design from roxygen -- AJB Jan 13

%% \VignetteIndexEntry{An overview of rlpSpec.}
%% \VignetteEngine{knitr}

\usepackage[utf8]{inputenc}
\usepackage{fancyvrb}
\usepackage[pdfborder={0 0 0}]{hyperref}
\usepackage{url}
\usepackage{upquote}
\usepackage{graphicx}
\usepackage{grffile}
\usepackage{float}
\usepackage{natbib}
\usepackage{amsmath}
\usepackage{geometry}
\geometry{verbose,tmargin=3cm,bmargin=5cm,lmargin=2.5cm,rmargin=2.5cm}
%\usepackage{fullpage}
%captions
\usepackage[font=sf, labelfont={sf,bf}, margin=2cm]{caption}
\usepackage{makeidx} % for indexing
%\usepackage{showidx} % shows page (remove when complete)
\makeindex % comment to have no index
%
\newcommand{\SC}[1]{\textsc{#1}}
\newcommand{\SCY}[0]{\SC{Yes}}
\newcommand{\SCN}[0]{\SC{No}}
\newcommand{\Rcmd}[1]{\texttt{#1}}
\newcommand{\rlp}[0]{\Rcmd{rlpSpec}}
\newcommand{\naive}[0]{na\"{\i}ve}
%% path, filename, caption, label
\newcommand{\listing}[4]{        %
  \begin{figure}[H]              %
    \centering                   %
    \VerbatimInput[numbers=left, %
      frame=single,              %
      label=#2]{#1}              %
    \caption{#3}                 %
    \label{#4}                   %
  \end{figure}                   %
}
\author{Andrew J. Barbour and Robert L. Parker}
\title{\rlp{}: Adaptive sine multitaper power spectral density estimation}
\begin{document}
\maketitle
\begin{abstract}
  This vignette provides an overview of some of the
  features included in \rlp{}, designed to
  compute estimates of power spectral
  density (PSD) for a univariate series in a sophisticated manner,
  with very little tuning effort.
  The sine multitapers are used in which
  the number of tapers varies with spectral shape, according
  to the optimal value proposed by \citet{rs1995}.
  The adaptive procedure
  iteratively refines the optimal number of tapers at each frequency
  based on the spectra from the previous iteration.
  Assuming the adaptive procedure converges, 
  this produces power spectra
  with significantly
  lower spectral variance 
  relative to results from less-sophisticated estimators.
  Sine tapers exhibit excellent
  leakage suppression characteristics, so bias effects
  are also reduced.
  Resolution and uncertainty vary with the number of tapers,
  which means we do
  not need to resort to either (1) windowing methods,
  which inherently degrade resolution at low-frequency
  (e.g. Welch's method); or (2) smoothing kernels,
  which can badly distort important features without careful tuning
  (e.g. the Daniell kernel in \Rcmd{stats::spectrum}).
  In this regards
  \rlp{} is best suited for data having 
   large dynamic range and some mix of narrow and wide-band structure,
   features typically found in geophysical datasets.
\end{abstract}

\tableofcontents
\pagebreak

\section{Quick start: A minimal example.}
First, we load the package into the namespace:
<<eval=TRUE, echo=FALSE>>=
par(las=1)
@
%% libload
<<eval=TRUE, echo=TRUE, label="Load library.">>=
library(rlpSpec)
@ 
For a series to analyze, we can use \Rcmd{magnet}, included in \rlp{},
which represents along-track measurements
of horizontal magnetic-field strength from a gimbaled, airborne magnetometer.
These data are a small subset of the full Project MAGNET series \citep{coleman1992},
which has provided insight into
the history of the Earth's oceanic crust 
\citep{parker1997, obrien1999, korte2002}.
The sampling interval is
once every kilometer (km), so the will represent
crustal magnetization with wavelengths longer than 2 km.
%% Project MAGNET data
<<eval=TRUE, eval=TRUE, label="Load Project MAGNET data.">>=
data(magnet)
@ 
The format of the data set is a \Rcmd{data.frame} with four
sets of information:
%%
<<eval=TRUE, eval=TRUE, label="Show contents of Project MAGNET.">>=
names(magnet)
@ 
The \Rcmd{raw} and \Rcmd{clean} names represent raw
and edited intensities respectively, expressed in units of nanotesla; 
\Rcmd{mdiff} is the difference between them.
The difference between them is a matter of just a few points
attributable to instrumental malfunction. 
%% edits
<<eval=TRUE, echo=TRUE, label="Outliers.">>=
subset(magnet, abs(mdiff)>0)
@
These deviations can,
as we will see, adversely affect the accuracy of any PSD estimate,
multitaper or otherwise.

Setting aside any discussion regarding sample stationarity,
we can find power spectral density (PSD)
estimates for the two series quite simply:
%% pspectrum 5 iters
<<eval=TRUE, echo=TRUE, label=MAGPSDS>>=
psdr <- pspectrum(magnet$raw)
psdc <- pspectrum(magnet$clean)
@
Each  \Rcmd{pspectrum} command calculates a pilot PSD, followed by 
\Rcmd{niter}
iterations of refinement.
With each iteration
the number of tapers is adjusted 
based the proposed optimal number from \citet{rs1995}, which
depends on spectral shape; we use 
quadratically weighted spectral derivatives to estimate this shape.
By default, a multipanel summary plot of the final PSD compared
to the raw periodogram estimate is shown after the final iterative stage.
Note that if the user forgets to assign the results of
\Rcmd{pspectrum} to the global environment, this can be
done with the \Rcmd{rlp\_envGet} function:
<<echo=TRUE, eval=TRUE>>=
psdc_recovered <- rlp_envGet("final_psd")
all.equal(psdc, psdc_recovered)
@
%stopifnot(!is.null("psdc"))

In general, spectral variance is reduced
with sequential refinements\footnote{
Messages given by \Rcmd{pspectrum} with
``Ave. S.V.R."  (not shown)
are in reference to the 
 average spectral-variance reduction, found from
 double-differenced spectra at each stage, relative
 to the pilot estimate.
}, but is not necessarily guaranteed to converge.
Note that in the example
the sampling frequency of both series
is 1 km$^{-1}$, the assumed value.

Figure \ref{fig:pmag} compares the 
power spectra for the \Rcmd{raw} and \Rcmd{clean} 
series\footnote{
Note that \Rcmd{pspectrum} returns
an object with class \Rcmd{spec}, so we have access to methods 
within \Rcmd{stats}, including \Rcmd{plot.spec}.
}.  
We expect the Project MAGNET data to be linear in the space of
linear-frequencies and logarithmic-power;
we see a clear
improvement in spectral shape between the two series,
simply because the large outliers have been removed.
The PSD of the clean series shows a
very ``red" spectrum typical of geophysical processes \citep{agnew1992},
and a rolloff in signal
for 10 kilometer wavelengths and longer; whereas, the 
PSD for the raw series looks somewhat unrealistic at higher wavelengths--
features which could be difficult to judge if the spectral variance was higher.

%<<eval=TRUE, echo=TRUE, label=MAGPSDAR>>=
%#psdc_ar <- pspectrum(magnet$clean, AR=TRUE, plot=FALSE)
%@
%
\begin{figure}[htb!]
\begin{center}
<<eval=TRUE, echo=TRUE, label=RAWvCLEAN>>=
plot(psdc, log="dB", main="Raw and Clean Project MAGNET power spectral density", 
       lwd=3, ci.col=NA, ylim=c(0,32), yaxs="i")
#plot(psdc_ar, log="dB", add=TRUE, lwd=3, col="red")
plot(psdr, log="dB", add=TRUE, lwd=3, lty=5)
text(c(0.25,0.34), c(11,24), c("Clean","Raw"), cex=1)
@
\caption{Power spectral density estimates for the raw and cleaned
             \Rcmd{Project MAGNET} data bundled with \rlp{}. Note that
             because the class is \Rcmd{'spec'} we have
             utilized  existing methods in the \Rcmd{stats} namespace.}
\label{fig:pmag}
\end{center}
\end{figure}

\section{Comparisons with other methods}

As we have shown in the Project MAGNET example, 
improved understanding of the physics behind the signals in the data
is of great concern.
Assuming a sample is free of non-physical points, how do
PSD estimates from \rlp{}
compare with other methods?
Unfortunately the suite of extensions with similar functionality
is relatively limited, but hopefully we have
summarized most, if not all, the available functions in Table \ref{tbl:methods}.

\input{tbl_specprogs}

We compare results from
\rlp{} with those from a few of the methods in Table \ref{tbl:methods},
using the same data: the cleaned Project MAGNET series.

%%
%% spectrum
%%
\subsection{\Rcmd{stats::spectrum}}

Included in the core distribution of R is \Rcmd{stats::spectrum}, which
accesses \Rcmd{stats::spec.ar} or \Rcmd{stats::spec.pgram} for either
parametric and non-parametric estimation, respectively.  
The user can optionally apply a single cosine taper, and/or a smoothing kernel.
Our method is non-parametric; hence, we will compare to the latter.

Included in \Rcmd{psdcore} is an option to compare the 
results with a 20\% tapered periodogram.
The cosine estimator is found with the following command:
<<eval=FALSE, echo=TRUE, label="Naive spectrum estimation.">>=
spec.pgram(X, pad=1, taper=0.2, detrend=FALSE, demean=FALSE, plot=F)
@
Within \Rcmd{psdcore} the comparison is
made with
the logical argument in \Rcmd{preproc} 
passed to \Rcmd{spec.pgram}, which is \SC{True} by default.

As a matter of bookkeeping and good practice, 
we should consider the working environment
accessed by \rlp{} functions.
To ensure
\Rcmd{psdcore} does not access any inappropriate information leftover
from the previous calculations, we
can set \Rcmd{refresh=TRUE}.
We can then
re-calculate the multitaper PSD and the
raw periodogram with \Rcmd{plotpsd=TRUE}; these
results are shown in Figure \ref{fig:two}.
%
\begin{figure}[htb!]
\begin{center}
%% Project MAGNET compare
<<eval=TRUE, echo=TRUE,  label=MAGNETNAIVE>>=
ntap <- psdc$taper
psdcore(magnet$clean, ntaper=ntap, refresh=TRUE, plotpsd=TRUE)
@
\caption{Top: Comparison between PSD estimators for the 
clean Project MAGNET data. The frequency axis is in units of $\log_{10}$ km$^{-1}$,
and power axis is in decibels.
Middle: The number of tapers applied as a function of frequency from
the \Rcmd{plot.tapers} method. 
Bottom: The spatial series used to estimate the PSDs and a subset
of the full autocorrelation function.}
\label{fig:two}
\end{center}
\end{figure}

%%
%% RSEIS
%%
\subsection{\Rcmd{RSEIS::mtapspec}}

In \Rcmd{RSEIS} the spectrum estimation tool is \Rcmd{mtapspec}, which
calls the program of \citet{lees1995}.
There are numerous optional tuning parameters, including
flags for
normalization and taper averaging.  
For our
purpose the correct normalization for \Rcmd{mtapspec} is found
by using
\Rcmd{MTP=list(kind=2, inorm=3)} and scaling the results by 2 (to convert
double-sided spectra to single-sided spectra).

We assume \Rcmd{mtapspec} doesn't remove a mean and trend from the
input series.  We can do this easily with the \Rcmd{prewhiten} methods:
<<eval=TRUE, echo=TRUE, label="Load RSEIS package.">>=
require(RSEIS)
dt=1 # km
# prewhiten the data after adding a linear trend + offset
summary(prewhiten(mc <- (ts(magnet$clean+1e3,deltat=dt)+seq_along(magnet$clean)), plot=FALSE))
@

Although the 
default operation of  \Rcmd{prewhiten} is to fit a linear model of the form 
$f(x) = \alpha x + \beta + \epsilon$
using ordinary linear least squares,
setting \Rcmd{AR.max} higher than zero
to fit an auto-regressive (AR) model to the data\footnote{Note that 
the linear trend fitting is removed from the series prior to AR estimation,
and the residuals from this fit are also returned.
}.  
This fit uses the Akaike infomation criterion (AIC) to select
the highest order appropriate for the data.

<<eval=TRUE, echo=TRUE, label="AR prewhiten">>=
summary(atsar <- prewhiten(mc, AR.max=100, plot=FALSE))
print(atsar$ardfit)
ats_lm <- atsar$prew_lm
ats_ar <- atsar$prew_ar
@
\label{sxn:prew}

\begin{figure}[htb!]
\begin{center}
<<eval=TRUE, echo=TRUE, fig.height=5, fig.width=5.5, label=ARFITPLT>>=
plot(ts.union(orig.plus.trend=mc, linear=ats_lm, ar=ats_ar), yax.flip=TRUE, 
     main=sprintf("Prewhitened Project MAGNET series"))
mtext(sprintf("linear and linear+AR(%s)", atsar$ardfit$order), line=1.1)
@
\caption{Pre-whitening of the Project MAGNET series (with a
synthetic linear model superimposed on it) assuming linear and linear-with-AR models.
}
\label{fig:magd}
\end{center}
\end{figure}

We didn't necessarily need to deal with the sampling information since it is just 1 per km;
but, supposing the sampling information was based on an interval, we
could have used
a negative value for \Rcmd{X.frq}, 
with which \Rcmd{psdcore}
would interpret as
an interval (instead of a frequency). 
A quick example highlights the equivalency:
<<eval=TRUE, echo=TRUE, label="Sampling rate versus interval.">>=
a <- rnorm(32)
all.equal(psdcore(a,1)$spec, psdcore(a,-1)$spec)
@

Returning the the \Rcmd{RSEIS} comparison, we first 
estimate the PSD from \Rcmd{mtapspec} with 10 tapers:
<<eval=TRUE, echo=TRUE, label="Compute PSD with mtapspec.">>=
tapinit <- 10
Mspec <- mtapspec(ats_lm, deltat(ats_lm), MTP=list(kind=2, inorm=3, nwin=tapinit, npi=0))
@
where \Rcmd{nwin} is the number of tapers taken and
\Rcmd{npi} is, from the documentation, the ``number of Pi-prolate functions" (we
leave it out for the sake of comparison). 
Note that the object returned
is not of class \Rcmd{spec}:
<<eval=TRUE, echo=TRUE>>=
str(Mspec)
@

We will calculate the comparative spectra
from
\begin{enumerate}
  \item \Rcmd{spectrum} (20\% cosine taper),
  \item \Rcmd{psdcore} (with fixed tapers), and
  \item \Rcmd{pspectrum} (allowing adaptive taper refinement)
\end{enumerate}
and we will need to correct for normalization factors, as necessary, with
\Rcmd{normalize}. Note that by default the normalization is
set within \Rcmd{pspectrum} (with \Rcmd{normalize}) once the adaptive procedure
is finished.

<<eval=TRUE, echo=TRUE, label="Comparative spectra.">>=
Xspec <- spec.pgram(ats_lm, pad=1, taper=0.2, detr=TRUE, dem=TRUE, plot=FALSE)
Pspec <- psdcore(ats_lm, dt, tapinit)
Aspec <- pspectrum(ats_lm, dt, tapinit, plot=FALSE)
# Correct for double-sidedness of spectrum and mtapspec results
class(Mspec)
Mspec <- normalize(Mspec, dt, "spectrum")
nt <- 1:Mspec$numfreqs
mspec <- Mspec$spec[nt]
class(Xspec)
Xspec <- normalize(Xspec, dt, "spectrum")
@
These estimates are shown on the same scale in
Figure \ref{fig:psdcomp}.

\begin{figure}[htb!]
\begin{center}
<<eval=TRUE, echo=TRUE, fig.width=6.0, fig.height=5.4, label=RSEIS>>=
require(RColorBrewer)
cols <- c("dark grey", brewer.pal(8, "Set1")[c(5:4,2)])
lwds <- c(1,2,2,5)
par(las=1)
plot(Xspec, log="dB", ylim=40*c(-0.4,1), ci.col=NA, 
       col=cols[1], lwd=lwds[1], main="PSD Comparisons") 
pltf <- Mspec$freq
lines(pltf, pltp <- dB(mspec), col=cols[2], lwd=lwds[2]) 
plot(Pspec, log="dB",  add=TRUE, col=cols[3], lwd=lwds[3]) 
plot(Aspec, log="dB", add=TRUE, col=cols[4], lwd=lwds[4]) 
legend("topright", 
  c("spec.pgram","RSEIS::mtapspec","psdcore","pspectrum"), 
  title="Estimator", lwd=3, cex=1.1, col=cols)
@
\caption{Comparisons of estimations of Project MAGNET power spectral densities.}
\label{fig:psdcomp}
\end{center}
\end{figure}

Because we did not specify the length of the FFT in \Rcmd{mtapspec}
we end up with different length spectra.  So, to form some statistical measure
of the results, we can interpolate PSD levels onto the \rlp{}-based frequencies
(or reciprocally): 
<<eval=TRUE, echo=TRUE, label="Interpolate results.">>=
require(signal)
pltpi <- interp1(pltf, pltp, Pspec$freq)
@
We regress the spectral values from \Rcmd{mtapspec} against
the \Rcmd{psdcore} results because we have used them to
produce uniformly tapered spectra
with an equal number of sine tapers.
<<eval=TRUE, echo=TRUE, label="Summarize regression statistics.">>=
df <- data.frame(x=dB(Pspec$spec), y=pltpi, tap=unclass(Aspec$taper))
summary(dflm <- lm(y ~ x + 0, df))
df$res <- residuals(dflm)
@
Create \Rcmd{ggplot2} objects for plotting purposes:
<<eval=TRUE, echo=TRUE, label="Create ggplot objects.">>=
require(ggplot2)
# data and regression
g <- ggplot(df, aes(x=x, y=y))
g1 <- g + geom_abline(intercept=0, slope=1, size=2, color="salmon")+
    geom_point(aes(color=dB(y/x))) + 
    geom_smooth(colour="black", formula = y ~ x + 0, method="lm", se=TRUE, fullrange=TRUE)
# and the residuals
g <- ggplot(df, aes(x=x, y=res))
g2 <- g + geom_abline(intercept=0, slope=0, size=2, color="salmon") +
    geom_point(aes(color=tap))
@
We show this regression and its 
associated residuals in Figure \ref{fig:psdreg}.  
The structure visible in the residuals
at low power levels may be from curvature bias in
the \Rcmd{mtapspec} results, which
manifests at short wavelengths
in Figure \ref{fig:psdcomp}.

\begin{figure}[htb!]
\begin{center}
<<eval=TRUE, echo=FALSE, fig.width=6, fig.height=5, label=RSEISvsRLP1>>=
print(g1 + scale_colour_gradient2(mid="light grey") + theme_bw() + 
	ggtitle("Regression of mtapspec against psdcore"))
@
<<eval=TRUE, echo=FALSE, fig.width=6, fig.height=2.5, label=RSEISvsRLP2>>=
print(g2 + theme_bw() +
	ggtitle("Regression residuals, colored by optimized tapers"))
@
\caption{Regression of  Project MAGNET PSD estimates: 
\Rcmd{mtapspec} against \Rcmd{psdcore}.}
\label{fig:psdreg}
\end{center}
\end{figure}

\subsection{\Rcmd{multitaper::spec.mtm}}
The function with the highest similarity to \rlp{} is
\Rcmd{spec.mtm} in the \Rcmd{multitaper} package: it uses
the sine multitapers, and can adaptively refine the spectrum.
In fact, this function
calls source code of a Fortran equivalent to \rlp{}
authored by R.L. Parker (\citeyear{parkerweb}) to do these operations.

There are some notable differences, though.  
By default \Rcmd{spec.mtm}
 uses the Discrete Prolate Spheroidal Sequences (dpss) 
of \citet{thomson1982},
which can have very good spectral leakage suppression (assuming
the number of tapers used is appropriate for the 
desired resolution, which varies inversely with the time-bandwidth product).
Spectral analyses using dpss can have superior results if the series is
relatively short (e.g. $N < 1000$), or has inherent spectra
with sharply changing features or
deep wells.
Improper usage of the dpss, however, can lead to severe bias.
Thus, considerable care should be given to parameter choices, 
which translates practicably
to having many more knobs to turn.

\subsection{\Rcmd{sapa::SDF}}
As of this writing, the package has no maintainer; 
lest we end up discussing deprecated and archived functions,
we will not compare it to \rlp{}.

\section{Can AR prewhitening improve the spectrum?}

This question must be addressed on a case-by-base basis; but, if there
is significant auto-regressive structure in the series then
the answer is likely \SC{Yes}.
The MAGNET dataset is an example where removing the spectrum
of the innovations from the AR prewhitening procedure can
reduce spectral variance considerably.

Recall the results of the prewhitening in Section \ref{sxn:prew}.
While \Rcmd{AR.max} was set relatively high,
only an AR(6) model was fit significantly, according to the AIC requirements. 
The estimated variance of the innovations is about $~20$ nT$^2$.
If the innovation spectrum
is flat (as we expect), this variance translates to power levels
of about $~16$ decibels
for a 1 km sampling interval.  

<<eval=TRUE, echo=TRUE, label="AR spectrum">>=
ntap <- 7
psd_ar <- psdcore(ats_ar, ntaper=ntap, refresh=TRUE)
dB(mean(psd_ar$spec))
@

An example of this potential variance-reduction is shown in Figure \ref{fig:arspecvar},
which we have used \Rcmd{pilot\_spec} to remove the AR spectrum
internally.  The AR component adds approximately $\pm 3$ dB to the original spectrum,
and removing it will give a considerably smoother spectrum without the 
need for adaptive 
taper optimization.

\begin{figure}[htb!]
\begin{center}
<<eval=TRUE, echo=TRUE, fig.width=6.0, fig.height=5.4, label=MAGPSDAR>>=
pilot_spec(ats_lm, ntap=ntap, remove.AR=100, plot=TRUE)
plot(Aspec, log="dB", add=TRUE, col="grey", lwd=4) 
plot(Aspec, log="dB", add=TRUE, lwd=3, lty=3) 
@
\caption{Spectral variance may be reduced by removing the effect
on an AR process, as is shown for the MAGNET data using
\Rcmd{pilot\_spec}.  The dotted line is the adaptively estimated spectrum
from Figure \ref{fig:psdcomp}.}
\label{fig:arspecvar}
\end{center}
\end{figure}


%\begin{figure}[htb!]
%\begin{center}
%<<eval=TRUE, echo=TRUE, label=PREWPSD>>=
%plot(psdc, log="dB", main="Raw and Clean Project MAGNET power spectral density", 
%     lwd=3, ci.col=NA, ylim=c(0,32), yaxs="i")
%plot(psdc_ar, log="dB", add=TRUE, lwd=3, col="red")
%plot(psdr, log="dB", add=TRUE, lwd=3, lty=5)
%text(c(0.25,0.34), c(11,24), c("Clean","Raw"), cex=1)
%@
%\caption{Power spectral density estimates for the raw and cleaned
%   \Rcmd{Project MAGNET}, with and without auto-regressive (AR) prewhitening.}
%\label{fig:arpsd}
%\end{center}
%\end{figure}

\section{Assessing spectral properties}
\subsection{Spectral uncertainties}
It is important to place bounds on the uncertainties associated
with a spectral estimate.
In a multitaper algorithm the uncertainty is distributed as
a $\chi{}_{\nu}^2$ variate where $\nu$ is
the number of degrees of freedom, which is twice the
number of tapers applied.
A proxy for this is simply $1/\sqrt{\nu - 1}$.
Using $\nu = 2*K$ we can approximate the distribution
of uncertainties from the tapers alone; however, a more
rigorous estimate comes from evaluating the appropriate 
distribution  for a coverage probability (e.g. $p=0.95$).
Among other calculations, \Rcmd{spectral\_properties} returns the 
$\chi{}_{\nu}^2$ based confidence intervals for $p=0.95$, as well as the
approximate uncertainties.  

To illustrate, we 
plot the uncertainties for an integer sequence\footnote{
Note the $\chi{}_{\nu}^2$ distribution is defined for non-negative,
non-integer degrees of freedom, but we cannot apply
fractions of tapers.} of tapers $[0, 50]$, shown in
Figure \ref{fig:psderr}.  The benefits of having more than just
a few tapers becomes obvious, though the spectral uncertainty
is asymptotically decreasing with taper numbers and yields
only slight improvements with logarithmic number of tapers.

\begin{figure}[htb!]
\begin{center}
<<eval=TRUE, echo=TRUE, fig.width=5, fig.height=4.5, label=SPECERR>>=
sp <- spectral_properties(as.tapers(1:50), p=0.95, db.ci=TRUE)
par(las=1)
plot(stderr.chi.upper ~ taper, sp, type="s", 
       ylim=c(-10,20), yaxs="i", xaxs="i",
       xlab=expression("number of tapers ("* nu/2 *")"), ylab="dB",
       main="Spectral uncertainties")
mtext("(additive factor)", line=.3)
lines(stderr.chi.lower ~ taper, sp, type="s")
lines(stderr.chi.median ~ taper, sp, type="s", lwd=2)
lines(stderr.chi.approx ~ taper, sp, type="s", col="red",lwd=2)
# to reach 3 db width confidence interval at p=.95
abline(v=33, lty=3)
legend("topright",
	c(expression("Based on "* chi^2 *"(p,"*nu*") and (1-p,"*nu*")"),
	  expression(""* chi^2 *"(p=0.5,"*nu*")"), 
	  "approximation"),
lwd=c(1,3,3), col=c("black","black","red"), bg="white")
@
\caption{Additive spectral uncertainties by number of tapers.
These quantized curves are found
by evaluating the $\chi{}_{\nu}^2$ distribution, where $\nu$ is
the number of degrees of freedom (two per taper).  
The black lines show uncertainties for a coverage probability of 0.95.
The thick, red line shows an approximation to these uncertainties
based on $1/\sqrt{\nu-1}$, which is accurate to within a few percent in most cases.
}
\label{fig:psderr}
\end{center}
\end{figure}

Returning to the Project MAGNET spectra, let us compare the \rlp{}
spectra with spectral uncertainty as bounded polygons.
First calculate the uncertainty polygon data:
<<eval=TRUE, echo=TRUE, label="Compute spectral properties.">>=
spp <- spectral_properties(Pspec$taper, db.ci=TRUE)
spa <- spectral_properties(Aspec$taper, db.ci=TRUE)
str(spa)
create_poly <- function(x, y, dy){
  xx <- c(x, rev(x))
  yy <- c(y+dy, rev(y-dy))
  return(data.frame(xx=xx, yy=yy))
}
pspp <- create_poly(Pspec$freq, dB(Pspec$spec), spp$stderr.chi.approx)
psppu <- create_poly(Pspec$freq, dB(Pspec$spec), spp$stderr.chi.upper)
pspa <- create_poly(Aspec$freq, dB(Aspec$spec), spa$stderr.chi.approx)
pspau <- create_poly(Aspec$freq, dB(Aspec$spec), spa$stderr.chi.upper)
@
and plot the comparison, shown in Figure \ref{fig:magerr}.

\begin{figure}[htb!]
\begin{center}
<<eval=TRUE, echo=TRUE, fig.width=6, fig.height=5.5, label=MAGERR>>=
plot(c(0,0.5),c(-8,35),col="white", 
       main="Project MAGNET Spectral Uncertainty (p > 0.95)",
       ylab="", xlab="spatial frequency, 1/km", yaxt="n", frame.plot=FALSE)
lines(c(2,1,1,2)*0.01,c(5,5,8.01,8.01)-8)
text(.05, -1.4, "3.01 dB")
polygon(psppu$xx, (psppu$yy), col="light grey", border="black", lwd=0.5)
polygon(pspp$xx, (pspp$yy), col="dark grey", border=NA)
text(0.15, 6, "With adaptive\ntaper refinement", cex=1.2)
polygon(pspau$xx, (pspau$yy)-10, col="light grey", border="black", lwd=0.5)
polygon(pspa$xx, (pspa$yy)-10, col="dark grey", border=NA)
text(0.35, 22, "Uniform tapering", cex=1.2)
@
\caption{Project MAGNET Spectral uncertainties with and without adaptive taper optimization.
The filled regions encompass the upper limit and approximate values of 
spectral uncertainty .}
\label{fig:magerr}
\end{center}
\end{figure}

\subsection{Spectral resolution}
There is an inherent tradeoff between the number of tapers 
applied and the spectral resolution (effectively, the spectral bandwidth).
In general, the greater the number of tapers applied, the lower the spectral resolution.
We can use the information returned from \Rcmd{spectral\_properties}
to visualize the actual 
differences in resolution for the Project MAGNET PSD estimates; these
are shown
in Figure \ref{fig:magres}.
\begin{figure}[htb!]
\begin{center}
<<eval=TRUE, echo=TRUE, fig.width=7, fig.height=4, label=MAGRES>>=
frq <- Aspec$freq
relp <- dB(1/spa$resolution)
par(las=1)
plot(frq, relp,
     col="light grey", 
     ylim=dB(c(1,5)),
     type="h", xaxs="i", yaxs="i", 
     ylab="dB", xlab="frequency, 1/km",
     main="Project MAGNET Spectral Resolution and Uncertainty")
lines(frq, relp)
lines(frq, spp$stderr.chi.upper+relp, lwd=1.5, lty=3)
lines(frq, spa$stderr.chi.upper+relp, lwd=3, lty=2)
abline(h=dB(sqrt(vardiff(Aspec$spec))), lwd=1.5, lty=2, col="red")
@
\caption{Resolution limits for Project MAGNET PSD (\Rcmd{niter=5} adapts--the default) 
in decibels relative to the spectrum.
The thick dashed line shows the 
resolved uncertainties ($p=0.05$) in the adaptively refined
spectrum; whereas, the thin dashed line
shows the approximate RMS spectral variation.
The dotted line shows the
resolved uncertainties for the uniformly tapered result.
}
\label{fig:magres}
\end{center}
\end{figure}

\subsection{Visualizing the adaptive history}
One might be curious to study how the
uncertainties change with each iteration.
\Rcmd{pspectrum}
 saves an array of ``historical" data in its working environment.
 Specifically, it saves the frequencies,
 spectral values, and number of tapers at each stage of the adaptive
 procedure, accessible with \Rcmd{get\_adapt\_history}.
 To ensure a fresh calculation and to 
 add a few more iterations to visualize, 
we repeat the adaptive spectral analysis, 
and then bring the stage history into the \Rcmd{.GlobalEnv} environment:
<<eval=TRUE, echo=TRUE, label="Get adaptive history.">>=
pspectrum(ats_lm, niter=6, plot=FALSE)
str(AH <- get_adapt_history())
@
Followed by some trivial manipulation:
<<eval=TRUE, echo=TRUE, label="Some manipulation.">>=
Freqs <- (AH$freq)
Dat <- AH$stg_psd
numd <- length(Freqs)
numit <- length(Dat)
StgPsd <- dB(matrix(unlist(Dat), ncol=numit))
Dat <- AH$stg_kopt
StgTap <- matrix(unlist(Dat), ncol=numit)
rm(Dat, AH)
@
We can plot these easily with \Rcmd{matplot} or other tools.  We show
the adaptive history in
Figure \ref{fig:psdhist}.  

\begin{figure}[htb!]
\begin{center}
<<eval=TRUE, echo=FALSE, fig.width=6, fig.height=4, label=HIST1>>=
seqcols <- seq_len(numit)
itseq <- seqcols - 1
toadd <- matrix(rep(itseq, numd), ncol=numit, byrow=T)
par(xpd=TRUE)
matplot(Freqs, StgPsd + (sc<-9)*toadd, type="l", lty=1, lwd=2, col="black",
             main="PSD estimation history", ylab="", xlab="Spatial frequency",
             yaxt="n", frame.plot=FALSE)
text(0.52, 1.05*sc*itseq, itseq)
text(0.49, 1.1*sc*numit, "Stage:")
@
<<eval=TRUE, echo=FALSE, fig.width=6, fig.height=3.5, label=HIST2>>=
par(xpd=TRUE)
Cols <- rev(rev(brewer.pal(9, "PuBuGn"))[seqcols])
invisible(lapply(rev(seqcols), FUN=function(mcol, niter=numit, Frq=Freqs, Dat=StgTap, cols=Cols){
  iter <- (niter+1)-mcol
  y <- Dat[,mcol]
  icol <- Cols[mcol]
  if (iter==1){
    plot(Frq, y, type="h", col=icol, 
           main="Taper optimization history", ylab="", xlab="Spatial frequency",
           ylim=c(-50,650), frame.plot=FALSE)
  } else {
    lines(Frq, y, type="h", col=icol)
  }
  lines(Frq, y, type="l",  lwd=1.2)
  x <- (c(0,1)+iter-1)*.05+0.075
  y <- c(595,595,650,650,595)+10
  text(mean(x),max(y)+1.0*diff(range(y)), mcol-1)
  polygon(c(x,rev(x),x[1]),y,border="black",col=icol)
}))
@
\caption{Adaptive spectral estimation history.
Top: Sequential PSD series for each stage of the adaptive method, 
offset by a few decibels for visualization purposes.
Bottom: Filled polygons showing the number of tapers at each stage.
}
\label{fig:psdhist}
\end{center}
\end{figure}

It may be informative to investigate cross correlation
coefficients between the stages:
<<eval=TRUE, echo=TRUE, label=SYMCORT>>=
symnum( cT <- cor(StgTap) )
@
<<eval=TRUE, echo=TRUE, label=SYMCORP>>=
symnum( cP <- cor(StgPsd) )
@
But, in this case, only the PSD estimates are significantly correlated.

%In Figure \ref{fig:histcorrel} we show the results of a hierarchic
%clustering
%algorithm applied to the cross correlation matrix.  This shows
%the expected result that
%each stage is closely related to its parent, the pilot spectrum.
%
%%image(cP, col=rev(heat.colors(5)))
%\begin{figure}[htb!]
%\begin{center}
%<<eval=TRUE, echo=FALSE, fig.width=6, fig.height=6, label=XCORP>>=
%hP <- heatmap(cP, Rowv = FALSE, symm = TRUE, col = heat.colors(5),
%distfun = function(c) as.dist(1 - c), keep.dendro = TRUE)
%@
%\caption{Clustered correlation coefficients with associated dendrograms;
%deeper red colors indicate stronger family association.}
%% is that true?
%\label{fig:histcorrel}
%\end{center}
%\end{figure}

%%
%\pagebreak
\section{Call overview}

Shown
in Figure \ref{fig:calls}
is a flow chart 
highlighting the essential
functions involved in the adaptive estimation
process. The primary function is \Rcmd{pspectrum}.

\begin{figure}[htb!]
 \centering
 \includegraphics[width=0.6\textwidth]{yuml_d.png}%%
 \includegraphics[width=0.4\textwidth]{yuml_n.png}
 \caption{Simplified call graph for \rlp{}. The dashed lines show a
 simplified circuit
 in which the spectra and its tapers make during the iterative process.}
 \label{fig:calls}
\end{figure}

%\section{Acknowledgements}

\section{Session Info}
<<eval=TRUE, echo=TRUE, label=SI>>=
sessionInfo()
@

%%
%\pagebreak
\bibliographystyle{apalike} %plainnat}
\bibliography{REFS}
\end{document}
